require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ThemesController do

  # This should return the minimal set of attributes required to create a valid
  # Theme. As you add validations to Theme, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ThemesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

   #the (before) line will instance the variable for every (describe methods)
  before {@theme = FactoryGirl.create(:theme)}


  #the (subject)line declare the variable that is use in all the test
  subject { @theme }

  describe "GET index",tag_index:true do

    it "assigns all themes as @themes" do

      #theme = FactoryGirl.create(:theme)
      get :index
      assigns(:themes).should eq([@theme])
    end

    it "renders the :index view" do
      get :index
      response.should render_template :index
    end

  end

  describe "GET show", tag_show:true do

    it "assigns the requested themes as @themes" do
      get :show, id: @theme
      assigns(:theme).should eq(@theme)

    end

    it "renders the #show view" do

      get :show, id: @theme
      response.should render_template :show
    end

  end

  describe "GET new",tag_new:true do

    it "assigns a new themes as @themes" do

      new_theme = FactoryGirl.create(:theme)
      Theme.should_receive(:new).and_return(new_theme)
      get :new
      assigns[:theme].should eq(new_theme)
    end


  end

  describe "GET edit", tag_edit:true do

    it "assigns the requested themes as @themes" do

      new_theme = FactoryGirl.create(:theme)
      get :edit, id: new_theme
      assigns[:theme].should eq(new_theme)


    end
  end

  describe "POST create", tag_create:true  do

    describe "with valid params" do
      it "creates a new Theme" do
        expect {
          post :create, {:themes => FactoryGirl.create(:theme)}
        }.to change(Theme, :count).by(1)


      end

      #it "assigns a newly created themes as @themes" do
      #  post :create, {:themes => FactoryGirl.attributes_for(:theme)}
      #  assigns(:themes).should be_a(Theme)
      #  assigns(:themes).should be_persisted
      #end
      #
      #it "redirects to the created themes" do
      #  post :create, {:themes => FactoryGirl.attributes_for(:theme)}
      #  response.should redirect_to(Theme.last)
      #end
    end

    #describe "with invalid params" do
    #  it "assigns a newly created but unsaved themes as @themes" do
    #    # Trigger the behavior that occurs when invalid params are submitted
    #    Theme.any_instance.stub(:save).and_return(false)
    #    post :create, {:themes => {}}, valid_session
    #    assigns(:themes).should be_a_new(Theme)
    #  end
    #
    #  it "re-renders the 'new' template" do
    #    # Trigger the behavior that occurs when invalid params are submitted
    #    Theme.any_instance.stub(:save).and_return(false)
    #    post :create, {:themes => {}}, valid_session
    #    response.should render_template("new")
    #  end
    #end
  end

  describe "PUT update", tag_update:true do
    describe "with valid params" do
      it "updates the requested themes" do
        theme = Theme.create! valid_attributes
        # Assuming there are no other themes in the database, this
        # specifies that the Theme created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Theme.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => theme.to_param, :themes => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested themes as @themes" do
        theme = Theme.create! valid_attributes
        put :update, {:id => theme.to_param, :themes => valid_attributes}, valid_session
        assigns(:themes).should eq(theme)
      end

      it "redirects to the themes" do
        theme = Theme.create! valid_attributes
        put :update, {:id => theme.to_param, :themes => valid_attributes}, valid_session
        response.should redirect_to(theme)
      end
    end

    describe "with invalid params" do
      it "assigns the themes as @themes" do
        theme = Theme.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Theme.any_instance.stub(:save).and_return(false)
        put :update, {:id => theme.to_param, :themes => {}}, valid_session
        assigns(:themes).should eq(theme)
      end

      it "re-renders the 'edit' template" do
        theme = Theme.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Theme.any_instance.stub(:save).and_return(false)
        put :update, {:id => theme.to_param, :themes => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested themes" do
      theme = Theme.create! valid_attributes
      expect {
        delete :destroy, {:id => theme.to_param}, valid_session
      }.to change(Theme, :count).by(-1)
    end

    it "redirects to the themes list" do
      theme = Theme.create! valid_attributes
      delete :destroy, {:id => theme.to_param}, valid_session
      response.should redirect_to(themes_url)
    end
  end

end
